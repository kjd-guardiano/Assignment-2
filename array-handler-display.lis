     1                                  ;Array Handler - Display
     2                                  ;Katherine Joy Guardiano, 240-3
     3                                  
     4                                  ; ==== Code Area Start ====
     5                                  global display
     6                                  extern scanf ;for calling the function scanf
     7                                  extern printf ;for calling the function printf
     8                                  
     9                                  segment .data
    10                                  ; ==== Data Declarations ====
    11 00000000 256C660A00              receivemsg db "%lf", 10, 0
    12                                  ; both startof* and endof* are for debugging purposes
    13                                  ;startofdisplaymsg db "Reached start of display.", 10, 0
    14                                  ;endofdisplaymsg db "Reached end of display.", 10, 0
    15                                  
    16                                  ; ==== Format Declarations ====
    17 00000005 256C6600                floatform db "%lf", 0 ;8-byte float format
    18                                  
    19                                  segment .bss
    20                                  ;example only
    21                                  align 64
    22                                  ;backup resb 832
    23 00000000 <res 40h>               number_input resq 8
    24                                  
    25                                  segment .text
    26                                  ; ==== Start of Code ====
    27                                  display:
    28 00000000 4989FE                  mov r14, rdi ;r14 is the array
    29 00000003 4989F7                  mov r15, rsi ;r15 is the count of valid numbers in array
    30                                  
    31                                  ; for debugging purposes
    32                                  ;mov rdi, startofdisplaymsg
    33                                  ;push rax
    34                                  ;call printf
    35                                  ;pop rax
    36                                  
    37 00000006 4D31ED                  xor r13, r13 ;places a 0 within register r13, acts as index; when r13 == 15, array is full
    38                                  
    39                                  begindisplay:
    40 00000009 4D39FD                  cmp r13, r15
    41 0000000C 741C                    je donedisplay ;if r13 > r15, exit
    42                                  
    43                                  ;block used for checking array filling
    44 0000000E F2430F1004EE            movsd xmm0, [r14 + r13*8]
    45 00000014 48BF-                   mov rdi, receivemsg
    45 00000016 [0000000000000000] 
    46 0000001E 50                      push rax
    47 0000001F E8(00000000)            call printf
    48 00000024 58                      pop rax
    49                                  
    50 00000025 49FFC5                  inc r13
    51                                  
    52 00000028 EBDF                    jmp begindisplay
    53                                  
    54                                  donedisplay:
    55 0000002A 4C89F8                  mov rax, r15 ;rax is the only register that can move an integer back to caller
    56                                  
    57                                  ; for debugging purposes
    58                                  ;mov rax, 0
    59                                  ;mov rdi, endofdisplaymsg
    60                                  ;push rax
    61                                  ;call printf
    62                                  ;pop rax
    63                                  
    64 0000002D C3                      ret
    65                                  ; ==== End of Code ====
