     1                                  ;Array Handler - Fill
     2                                  ;Katherine Joy Guardiano, 240-3
     3                                  
     4                                  ; ==== Code Area Start ====
     5                                  global fillarray
     6                                  extern scanf ;for calling the function scanf
     7                                  extern printf ;for calling the function printf
     8                                  
     9                                  segment .data
    10                                  ; ==== Data Declarations ====
    11 00000000 4E756D626572207265-     receivemsg db "Number received: %lf", 10, 0
    11 00000009 6365697665643A2025-
    11 00000012 6C660A00           
    12 00000016 526561636865642065-     endoffillmsg db "Reached end of fill.", 10, 0
    12 0000001F 6E64206F662066696C-
    12 00000028 6C2E0A00           
    13                                  
    14                                  ; ==== Format Declarations ====
    15 0000002C 256C6600                floatform db "%lf", 0 ;8-byte float format
    16 00000030 25372E346C6620372E-     arrayform db "%7.4lf 7.4lf 7.4lf", 10, 10, 0
    16 00000039 346C6620372E346C66-
    16 00000042 0A0A00             
    17                                  
    18                                  segment .bss
    19                                  ;example only
    20                                  align 64
    21                                  ;backup resb 832
    22                                  ;number_input resq 8
    23                                  
    24                                  segment .text
    25                                  ; ==== Start of Code ====
    26                                  fillarray:
    27 00000000 4989FE                  mov r14, rdi ;backs up incoming data, r14 is the array
    28 00000003 4989F7                  mov r15, rsi ;r15 is # of cells
    29                                  
    30 00000006 4D31ED                  xor r13, r13 ;places a 0 within register r13, acts as index; when r13 == 15, array is full
    31                                  
    32                                  begin:
    33 00000009 4D39FD                  cmp r13, r15
    34 0000000C 742C                    je done ;if r13 > r15, exit
    35                                  
    36 0000000E B800000000              mov rax, 0
    37 00000013 48BF-                   mov rdi, floatform
    37 00000015 [2C00000000000000] 
    38 0000001D 6A00                    push qword 0
    39 0000001F 4889E6                  mov rsi, rsp
    40 00000022 E8(00000000)            call scanf
    41 00000027 4158                    pop r8
    42                                  
    43                                  ;check for CTRL+D first, places -1 in eax
    44 00000029 4898                    cdqe ;rax will fill with whatever is in eax, does NOT have parameters
    45 0000002B 4883F8FF                cmp rax, -1
    46 0000002F 7409                    je done ;jumps ONLY if equal to "done"
    47                                  
    48                                  ;pop rbx ;causes a seg fault when included, for some reason?
    49 00000031 4F8904EE                mov [r14 + r13*8], r8 ;8 represents one cell
    50                                  
    51 00000035 49FFC5                  inc r13
    52                                  
    53 00000038 EBCF                    jmp begin
    54                                  
    55                                  done:
    56 0000003A 4C89E8                  mov rax, r13 ;rax is the only register that can move an integer back to caller
    57                                  
    58 0000003D C3                      ret
    59                                  ; ==== End of Code ====
