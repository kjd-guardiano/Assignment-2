     1                                  ;Array Handler - Fill
     2                                  ;Katherine Joy Guardiano, 240-3
     3                                  
     4                                  ; ==== Code Area Start ====
     5                                  global fillarray
     6                                  extern scanf ;for calling the function scanf
     7                                  extern printf ;for calling the function printf
     8                                  
     9                                  segment .data
    10                                  ; ==== Data Declarations ====
    11 00000000 456E74657220666C6F-     msg db "Enter float numbers separated by white space. After last number, enter white space followed by CTRL+D.", 10, 0
    11 00000009 6174206E756D626572-
    11 00000012 732073657061726174-
    11 0000001B 656420627920776869-
    11 00000024 74652073706163652E-
    11 0000002D 204166746572206C61-
    11 00000036 7374206E756D626572-
    11 0000003F 2C20656E7465722077-
    11 00000048 686974652073706163-
    11 00000051 6520666F6C6C6F7765-
    11 0000005A 64206279204354524C-
    11 00000063 2B442E0A00         
    12 00000068 4E756D626572207265-     receivemsg db "Number received: %lf", 10, 0
    12 00000071 6365697665643A2025-
    12 0000007A 6C660A00           
    13 0000007E 526561636865642065-     endoffillmsg db "Reached end of fill.", 10, 0
    13 00000087 6E64206F662066696C-
    13 00000090 6C2E0A00           
    14                                  
    15                                  ; ==== Format Declarations ====
    16 00000094 256C6600                floatform db "%lf", 0 ;8-byte float format
    17 00000098 25372E346C6620372E-     arrayform db "%7.4lf 7.4lf 7.4lf", 10, 10, 0
    17 000000A1 346C6620372E346C66-
    17 000000AA 0A0A00             
    18                                  
    19                                  segment .bss
    20                                  ;example only
    21                                  align 64
    22                                  ;backup resb 832
    23                                  ;number_input resq 8
    24                                  
    25                                  segment .text
    26                                  ; ==== Start of Code ====
    27                                  fillarray:
    28 00000000 4989FE                  mov r14, rdi ;backs up incoming data, r14 is the array
    29 00000003 4989F7                  mov r15, rsi ;r15 is # of cells
    30                                  
    31                                  ;Block for message output.
    32 00000006 B800000000              mov rax, 0 ;rax is a known register, counts # of float registers
    33 0000000B 48BF-                   mov rdi, msg
    33 0000000D [0000000000000000] 
    34 00000015 50                      push rax
    35 00000016 E8(00000000)            call printf
    36 0000001B 58                      pop rax
    37                                  
    38 0000001C 4D31ED                  xor r13, r13 ;places a 0 within register r13, acts as index; when r13 == 15, array is full
    39                                  
    40                                  begin:
    41 0000001F 4D39FD                  cmp r13, r15
    42 00000022 742C                    je done ;if r13 > r15, exit
    43                                  
    44 00000024 B800000000              mov rax, 0
    45 00000029 48BF-                   mov rdi, floatform
    45 0000002B [9400000000000000] 
    46 00000033 6A00                    push qword 0
    47 00000035 4889E6                  mov rsi, rsp
    48 00000038 E8(00000000)            call scanf
    49 0000003D 4158                    pop r8
    50                                  
    51                                  ;check for CTRL+D first, places -1 in eax
    52 0000003F 4898                    cdqe ;rax will fill with whatever is in eax, does NOT have parameters
    53 00000041 4883F8FF                cmp rax, -1
    54 00000045 7409                    je done ;jumps ONLY if equal to "done"
    55                                  
    56                                  ;pop rbx ;causes a seg fault when included, for some reason?
    57 00000047 4F8904EE                mov [r14 + r13*8], r8 ;8 represents one cell
    58                                  
    59 0000004B 49FFC5                  inc r13
    60                                  
    61 0000004E EBCF                    jmp begin
    62                                  
    63                                  done:
    64 00000050 4C89E8                  mov rax, r13 ;rax is the only register that can move an integer back to caller
    65                                  
    66 00000053 C3                      ret
    67                                  ; ==== End of Code ====
