     1                                  ;Array Handler - Manage
     2                                  ;Katherine Joy Guardiano, 240-3
     3                                  
     4                                  ; ==== Code Area Start ====
     5                                  global manage
     6                                  extern fillarray
     7                                  extern sumarray
     8                                  extern display
     9                                  extern scanf ;for calling the function scanf
    10                                  extern printf ;for calling the function printf
    11                                  
    12                                  segment .data
    13                                  ; ==== Data Declarations ====
    14                                  max_size equ 8 ;8 cells in the array
    15                                  
    16                                  ; ==== Format Declarations ====
    17 00000000 456E74657220666C6F-     prefillmsg db "Enter float numbers separated by white space. After last number, enter white space followed by CTRL+D.", 10, 0
    17 00000009 6174206E756D626572-
    17 00000012 732073657061726174-
    17 0000001B 656420627920776869-
    17 00000024 74652073706163652E-
    17 0000002D 204166746572206C61-
    17 00000036 7374206E756D626572-
    17 0000003F 2C20656E7465722077-
    17 00000048 686974652073706163-
    17 00000051 6520666F6C6C6F7765-
    17 0000005A 64206279204354524C-
    17 00000063 2B442E0A00         
    18 00000068 5468616E6B20796F75-     postfillmsg db "Thank you for your input. The numbers received in the array are:", 10, 0
    18 00000071 20666F7220796F7572-
    18 0000007A 20696E7075742E2054-
    18 00000083 6865206E756D626572-
    18 0000008C 732072656365697665-
    18 00000095 6420696E2074686520-
    18 0000009E 617272617920617265-
    18 000000A7 3A0A00             
    19 000000AA 54686520746F74616C-     postsummsg db "The total sum of these numbers is %lf.", 10 ,0
    19 000000B3 2073756D206F662074-
    19 000000BC 68657365206E756D62-
    19 000000C5 65727320697320256C-
    19 000000CE 662E0A00           
    20 000000D2 5468616E6B20796F75-     asmexitmsg db "Thank you for using the Array Management System.", 10, 0
    20 000000DB 20666F72207573696E-
    20 000000E4 672074686520417272-
    20 000000ED 6179204D616E616765-
    20 000000F6 6D656E742053797374-
    20 000000FF 656D2E0A00         
    21 00000104 256C6600                floatform db "%lf", 0 ;8-byte float format
    22 00000108 257300                  stringform db "%s", 0 ;string format
    23 0000010B 546869732069732061-     testmsg db "This is a test output.", 10, 0
    23 00000114 2074657374206F7574-
    23 0000011D 7075742E0A00       
    24                                  
    25                                  segment .bss
    26 00000000 <res 40h>               nicearray resq max_size ;max_size acts as a constant
    27                                  
    28                                  align 64
    29 00000040 <res 1A00h>             backuparea resq 832 
    30                                  
    31                                  segment .text
    32                                  ; ==== Start of Code ====
    33                                  manage:
    34                                  ; ==== Start of Backup ====
    35 00000000 55                      push       rbp                                              ;Save a copy of the stack base pointer
    36 00000001 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
    37 00000004 53                      push       rbx                                              ;Back up rbx
    38 00000005 51                      push       rcx                                              ;Back up rcx
    39 00000006 52                      push       rdx                                              ;Back up rdx
    40 00000007 56                      push       rsi                                              ;Back up rsi
    41 00000008 57                      push       rdi                                              ;Back up rdi
    42 00000009 4150                    push       r8                                               ;Back up r8
    43 0000000B 4151                    push       r9                                               ;Back up r9
    44 0000000D 4152                    push       r10                                              ;Back up r10
    45 0000000F 4153                    push       r11                                              ;Back up r11
    46 00000011 4154                    push       r12                                              ;Back up r12
    47 00000013 4155                    push       r13                                              ;Back up r13
    48 00000015 4156                    push       r14                                              ;Back up r14
    49 00000017 4157                    push       r15                                              ;Back up r15
    50 00000019 9C                      pushf                                                       ;Back up rflags
    51                                  ; ==== End of Backup ====
    52                                  
    53                                  ;print message to user to inform input
    54 0000001A B800000000              mov rax, 0
    55 0000001F 48BF-                   mov rdi, stringform
    55 00000021 [0801000000000000] 
    56 00000029 48BE-                   mov rsi, prefillmsg
    56 0000002B [0000000000000000] 
    57 00000033 E8(00000000)            call printf
    58                                  
    59                                  ;block to call fill array
    60 00000038 B800000000              mov rax, 0
    61 0000003D 48BF-                   mov rdi, nicearray ;gives address of array
    61 0000003F [0000000000000000] 
    62 00000047 BE08000000              mov rsi, max_size ;gives maximum size for array
    63 0000004C E8(00000000)            call fillarray
    64 00000051 4889C3                  mov rbx, rax ;store num elements read in rbx
    65                                  
    66                                  ;print message to user to indicate end of input
    67 00000054 B800000000              mov rax, 0
    68 00000059 48BF-                   mov rdi, stringform
    68 0000005B [0801000000000000] 
    69 00000063 48BE-                   mov rsi, postfillmsg
    69 00000065 [6800000000000000] 
    70 0000006D E8(00000000)            call printf
    71                                  
    72                                  ;call display function
    73 00000072 48BF-                   mov rdi, nicearray
    73 00000074 [0000000000000000] 
    74 0000007C 4889DE                  mov rsi, rbx
    75 0000007F E8(00000000)            call display
    76                                  
    77 00000084 F2440F10E8              movsd xmm13, xmm0
    78                                  
    79 00000089 B800000000              mov rax, 0
    80 0000008E 48BF-                   mov rdi, nicearray
    80 00000090 [0000000000000000] 
    81 00000098 4889DE                  mov rsi, rbx
    82 0000009B E8(00000000)            call sumarray
    83                                  
    84                                  ;save result in register
    85 000000A0 F2410F10C5              movsd xmm0, xmm13
    86                                  
    87                                  ;print message for end of sum function
    88 000000A5 B801000000              mov rax, 1
    89 000000AA 48BF-                   mov rdi, postsummsg
    89 000000AC [AA00000000000000] 
    90 000000B4 E8(00000000)            call printf
    91                                  
    92                                  ;print exit message
    93 000000B9 B800000000              mov rax, 0
    94 000000BE 48BF-                   mov rdi, stringform
    94 000000C0 [0801000000000000] 
    95 000000C8 48BE-                   mov rsi, asmexitmsg
    95 000000CA [D200000000000000] 
    96 000000D2 E8(00000000)            call printf
    97                                  
    98                                  ;begin moving registers to send to c program
    99 000000D7 F2410F10C5              movsd xmm0, xmm13
   100 000000DC 4889D8                  mov rax, rbx
   101                                  ; ==== Start of Restore ====
   102 000000DF 9D                      popf
   103 000000E0 415F                    pop     r15
   104 000000E2 415E                    pop     r14
   105 000000E4 415D                    pop     r13
   106 000000E6 415C                    pop     r12
   107 000000E8 415B                    pop     r11
   108 000000EA 415A                    pop     r10
   109 000000EC 4159                    pop     r9
   110 000000EE 4158                    pop     r8
   111 000000F0 5F                      pop     rdi
   112 000000F1 5E                      pop     rsi
   113 000000F2 5A                      pop     rdx
   114 000000F3 59                      pop     rcx
   115 000000F4 5B                      pop     rbx
   116 000000F5 5D                      pop     rbp
   117                                  
   118                                  ;return array to C module
   119                                  ;mov qword [rdi], rax
   120 000000F6 48B8-                   mov rax, nicearray
   120 000000F8 [0000000000000000] 
   121                                  ; ==== End of Restore ====
   122 00000100 C3                      ret
   123                                  ; ==== End of Code ====
