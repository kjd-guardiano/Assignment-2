     1                                  ;Array Handler - Sum
     2                                  ;Katherine Joy Guardiano, 240-3
     3                                  
     4                                  ; ==== Code Area Start ====
     5                                  global sumarray
     6                                  extern scanf ;for calling the function scanf
     7                                  extern printf ;for calling the function printf
     8                                  
     9                                  segment .data
    10                                  ; ==== Message Declarations ====
    11 00000000 537563636573736675-     startmsg db "Successfully reached start of sum section.", 10, 0
    11 00000009 6C6C79207265616368-
    11 00000012 656420737461727420-
    11 0000001B 6F662073756D207365-
    11 00000024 6374696F6E2E0A00   
    12 0000002C 537563636573736675-     endmsg db "Successfully reached end of sum section.", 10, 0
    12 00000035 6C6C79207265616368-
    12 0000003E 656420656E64206F66-
    12 00000047 2073756D2073656374-
    12 00000050 696F6E2E0A00       
    13                                  ;decmsg db "r13 is currently %lf.", 10, 0
    14 00000056 43757272656E742074-     totalmsg db "Current total is %lf.", 10, 0
    14 0000005F 6F74616C2069732025-
    14 00000068 6C662E0A00         
    15                                  
    16                                  ; ==== Format Declarations ====
    17                                  
    18 0000006D 256C6600                floatform db "%lf", 0 ;8-byte float format
    19 00000071 257300                  stringform db "%s", 0 ;string format
    20                                  
    21                                  segment .bss
    22                                  align 64
    23 00000000 <res 40h>               number_input resq 8
    24 00000040 <res 340h>              backuparea resb 832
    25                                  
    26                                  
    27                                  segment .text
    28                                  ; ==== Start of Code ====
    29                                  sumarray:
    30                                  ; ==== Start of Backup ====
    31                                  ;push       rbp                                              ;Save a copy of the stack base pointer
    32                                  ;mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
    33                                  ;push       rbx                                              ;Back up rbx
    34                                  ;push       rcx                                              ;Back up rcx
    35                                  ;push       rdx                                              ;Back up rdx
    36                                  ;push       rsi                                              ;Back up rsi
    37                                  ;push       rdi                                              ;Back up rdi
    38                                  ;push       r8                                               ;Back up r8
    39                                  ;push       r9                                               ;Back up r9
    40                                  ;push       r10                                              ;Back up r10
    41                                  ;push       r11                                              ;Back up r11
    42                                  ;push       r12                                              ;Back up r12
    43                                  ;push       r13                                              ;Back up r13
    44                                  ;push       r14                                              ;Back up r14
    45                                  ;push       r15                                              ;Back up r15
    46                                  ;pushf                                                       ;Back up rflags
    47                                  ; ==== End of Backup ====
    48 00000000 4989FE                  mov r14, rdi ;r14 is the array
    49 00000003 4989F7                  mov r15, rsi ;r15 is the count of valid numbers in array
    50                                  
    51 00000006 B800000000              mov rax, 0
    52 0000000B 48BF-                   mov rdi, startmsg
    52 0000000D [0000000000000000] 
    53 00000015 50                      push rax
    54 00000016 E8(00000000)            call printf
    55 0000001B 58                      pop rax
    56                                  
    57 0000001C 4D31ED                  xor r13, r13
    58 0000001F 4831C9                  xor rcx, rcx
    59                                  
    60                                  sumstart:
    61 00000022 4D39FD                  cmp r13, r15
    62 00000025 740F                    je sumdone ;jumps ONLY if equal to "done"
    63                                  
    64                                  
    65                                  ; [TODO] addition here
    66 00000027 F2430F100CEE            movsd xmm1, [r14 + r13*8]
    67 0000002D F20F58C1                addsd xmm0, xmm1
    68                                  ; [TODO] addition here
    69                                  
    70 00000031 49FFC5                  inc r13
    71 00000034 EBEC                    jmp sumstart
    72                                  
    73                                  sumdone:
    74                                  
    75 00000036 48BF-                   mov rdi, totalmsg
    75 00000038 [5600000000000000] 
    76 00000040 50                      push rax
    77 00000041 E8(00000000)            call printf
    78 00000046 58                      pop rax
    79                                  
    80 00000047 48BF-                   mov rdi, endmsg
    80 00000049 [2C00000000000000] 
    81 00000051 50                      push rax
    82 00000052 E8(00000000)            call printf
    83 00000057 58                      pop rax
    84                                  
    85                                  ; ==== End of Code ====
    86 00000058 C3                      ret
