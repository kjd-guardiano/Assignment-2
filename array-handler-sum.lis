     1                                  ;Array Handler - Sum
     2                                  ;Katherine Joy Guardiano, 240-3
     3                                  
     4                                  ; ==== Code Area Start ====
     5                                  global sumarray
     6                                  extern scanf ;for calling the function scanf
     7                                  extern printf ;for calling the function printf
     8                                  
     9                                  segment .data
    10                                  ; ==== Message Declarations ====
    11                                  ;startmsg db "Successfully reached start of sum section.", 10, 0
    12                                  ;endmsg db "Successfully reached end of sum section.", 10, 0
    13                                  ;decmsg db "r13 is currently %lf.", 10, 0
    14 00000000 43757272656E742074-     totalmsg db "Current total is %lf.", 10, 0
    14 00000009 6F74616C2069732025-
    14 00000012 6C662E0A00         
    15 00000017 52656163686564206C-     loopmsg db "Reached loop of sum section.", 10, 0
    15 00000020 6F6F70206F66207375-
    15 00000029 6D2073656374696F6E-
    15 00000032 2E0A00             
    16 00000035 723133206973206375-     checkmsg db "r13 is current %lf.", 10, 0
    16 0000003E 7272656E7420256C66-
    16 00000047 2E0A00             
    17                                  
    18                                  ; ==== Format Declarations ====
    19                                  
    20 0000004A 256C6600                floatform db "%lf", 0 ;8-byte float format
    21 0000004E 257300                  stringform db "%s", 0 ;string format
    22                                  
    23                                  segment .bss
    24                                  align 64
    25 00000000 <res 40h>               number_input resq 8
    26 00000040 <res 340h>              backuparea resb 832
    27                                  
    28                                  
    29                                  segment .text
    30                                  ; ==== Start of Code ====
    31                                  sumarray:
    32 00000000 4989FE                  mov r14, rdi ;r14 is the array
    33 00000003 4989F7                  mov r15, rsi ;r15 is the count of valid numbers in array
    34                                  
    35                                  ; for debugging purposes
    36                                  ;mov rdi, startmsg
    37                                  ;push rax
    38                                  ;call printf
    39                                  ;pop rax
    40                                  
    41 00000006 4D31ED                  xor r13, r13 ;r13 as index
    42                                  
    43                                  sumstart:
    44 00000009 4D39FD                  cmp r13, r15
    45 0000000C 7D0B                    jge sumdone ;jumps ONLY if equal to "done"
    46                                  
    47                                  ; [TODO] addition here
    48 0000000E F2470F582CEE            addsd xmm13, [r14 + 8*r13]
    49                                  ; [TODO] addition here
    50 00000014 49FFC5                  inc r13
    51 00000017 EBF0                    jmp sumstart
    52                                  
    53                                  sumdone:
    54 00000019 F2410F10C7              movsd xmm0, xmm15
    55                                  
    56                                  ;mov rdi, endmsg
    57                                  ;push rax
    58                                  ;call printf
    59                                  ;pop rax
    60                                  
    61 0000001E C3                      ret
    62                                  ; ==== End of Code ====
